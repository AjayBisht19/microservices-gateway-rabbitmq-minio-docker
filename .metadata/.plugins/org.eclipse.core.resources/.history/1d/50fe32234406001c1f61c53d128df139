package com.filepost.controller;

import java.io.File;  
import java.io.FileOutputStream;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.filepost.dao.FileDocument;
import com.filepost.repository.FileRepository;

import io.minio.BucketExistsArgs;
import io.minio.MakeBucketArgs;
import io.minio.MinioClient;
import io.minio.PutObjectArgs;

@RestController
@CrossOrigin("*")
public class FilePostController {
	@Autowired
	private FileRepository fileRepository;
	
	@Value("${minio.access.name}")
    String accessKey;
    @Value("${minio.access.secret}")
    String accessSecret;
    @Value("${minio.url}")
    String minioUrl;
	
	 @Value("${minio.bucket.name}")
	    String defaultBucketName;

	@PostMapping("/add-file")
    public ResponseEntity<?> addFile(@RequestParam("file") MultipartFile multipartFile,@RequestParam("user") String user){
		FileDocument file1 = new FileDocument();
        file1.setFileName(multipartFile.getOriginalFilename());
        file1.setUser(user);
        file1.setType(multipartFile.getContentType());
        file1.setCreatedAt(new Date());
        FileDocument save = fileRepository.save(file1);
    String fileLocation = new File("D:\\File-handler\\File-Handler\\src\\main\\resources\\static\\uploads") + "\\" + save.getId();

    try {

    FileOutputStream output = new FileOutputStream(fileLocation);

    output.write(multipartFile.getBytes());

    output.close();
    
    uploadToMinio(multipartFile,multipartFile.getOriginalFilename());
    }catch(Exception e){
        e.printStackTrace();
    }
    System.out.println("in post service");
    return new ResponseEntity<>(save,HttpStatus.CREATED);
    }

	
	
	
	private void uploadToMinio(MultipartFile multipartFile,String name) { 
		System.out.println("minio function "+defaultBucketName);
		try {
			 MinioClient minioClient = MinioClient.builder().endpoint(minioUrl)
	                    .credentials(accessKey, accessSecret).build();

            boolean bucketExists = minioClient.bucketExists(BucketExistsArgs.builder().bucket(defaultBucketName).build());
            System.out.println("Bucket exist "+bucketExists);
            if (!bucketExists) {
                System.out.println("Bucket does not exist");

                minioClient.makeBucket(MakeBucketArgs.builder().bucket(defaultBucketName).build());
            }
            minioClient.putObject(
            	    PutObjectArgs.builder().bucket(defaultBucketName).object(name).stream(
            	            multipartFile.getInputStream(), -1, 10485760)
            	        .contentType(multipartFile.getContentType())
            	        .build());
        } catch (Exception e) {
            System.out.println("Error occurred: " + e);
        }
		
	}
}
